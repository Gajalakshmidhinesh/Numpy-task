# -*- coding: utf-8 -*-
"""Numpy task-dw30

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15d3nGiW52LoBeOmsG1d7H9Eg0uXcvtp3

# Numpy

#### 1. Import the numpy package under the name `np` (★☆☆) 
(**hint**: import … as …)
"""

import numpy as np

"""#### 2. Print the numpy version and the configuration (★☆☆) 
(**hint**: np.\_\_version\_\_, np.show\_config)
"""

print(np.__version__)

np.show_config()

"""#### 3. Create a null vector of size 10 (★☆☆) 
(**hint**: np.zeros)
"""

null_vector = np.zeros(10)
print(null_vector)

"""#### 4.  How to find the memory size of any array (★☆☆) 
(**hint**: size, itemsize)
"""

a=np.array(["Ford", "Volvo", "BMW"])
memory_size = a.size * a.itemsize
print(memory_size)

"""#### 5.  How to get the documentation of the numpy add function from the command line? (★☆☆) 
(**hint**: np.info)
"""

import numpy as np
help(np.add)

"""#### 6.  Create a null vector of size 10 but the fifth value which is 1 (★☆☆) 
(**hint**: array\[4\])
"""

a=np.zeros(10)
a[4]=1
print(a)

"""#### 7.  Create a vector with values ranging from 10 to 49 (★☆☆) 
(**hint**: np.arange)
"""

a=np.arange(10,50)
print(a)

"""#### 8.  Reverse a vector (first element becomes last) (★☆☆) 
(**hint**: array\[::-1\])
"""

a=np.array([1,2,3,4,5,6,7,8,9,0])
reverse=a[::-1]
print(reverse)

"""#### 9.  Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆) 
(**hint**: reshape)
"""

matrix = np.arange(9).reshape((3, 3))
print(matrix)

"""#### 10. Find indices of non-zero elements from \[1,2,0,0,4,0\] (★☆☆) 
(**hint**: np.nonzero)
"""

a=[1,2,0,0,4,0]
n=np.nonzero(a)
print(n)

"""#### 11. Create a 3x3 identity matrix (★☆☆) 
(**hint**: np.eye)
"""

a=np.eye(3)
print(a)

"""#### 12. Create a 3x3x3 array with random values (★☆☆) 
(**hint**: np.random.random)
"""

array = np.random.randint(0, 100, size=(3, 3, 3))
print(array)

"""#### 13. Create a 10x10 array with random values and find the minimum and maximum values (★☆☆) 
(**hint**: min, max)
"""

array = np.random.randint(0, 100, size=(10,10))
print(array)
max=array.max()
min=array.min()
print(max)
print(min)

"""#### 14. Create a random vector of size 30 and find the mean value (★☆☆) 
(**hint**: mean)
"""

array = np.random.randint(0, 100, size=(30))
print(array)
mean=array.mean()
print(mean)

"""#### 15. Create a 2d array with 1 on the border and 0 inside (★☆☆) 
(**hint**: array\[1:-1, 1:-1\])
"""

array = np.ones((5, 5))
array[1:-1,1:-1]=0
print(array)

"""#### 16. How to add a border (filled with 0's) around an existing array? (★☆☆) 
(**hint**: np.pad)
"""

arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr)

# Add a border of size 1 filled with 0's around the array
padded_arr = np.pad(arr, pad_width=1, mode='constant', constant_values=0)
print(padded_arr)

"""#### 17. What is the result of the following expression? (★☆☆) 
(**hint**: NaN = not a number, inf = infinity)

```python
0 * np.nan
np.nan == np.nan
np.inf > np.nan
np.nan - np.nan
0.3 == 3 * 0.1
```
"""

0 * np.nan
np.nan == np.nan
np.inf > np.nan
np.nan - np.nan
0.3 == 3 * 0.1

"""#### 18. Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (★☆☆) 
(**hint**: np.diag)
"""

matrix = np.diag(np.array([1, 2, 3, 4]), k=-1) #k value represents the area just below the main diagnol
print(matrix)

"""#### 19. Create a 8x8 matrix and fill it with a checkerboard pattern (★☆☆) 
(**hint**: array\[::2\])
"""

x = np.zeros((8,8))
x[1::2,::2] = 1

x[::2,1::2] = 1

print(x)

"""#### 20. Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element? 
(**hint**: np.unravel_index)
"""

shape = (6, 7, 8)

# Find the index of the 100th element
index = np.unravel_index(99, shape)

print(index)

"""#### 21. Create a checkerboard 8x8 matrix using the tile function (★☆☆) 
(**hint**: np.tile)
"""

checkerboard = np.array([[0, 1], [1, 0]])

# Use the tile function to repeat the checkerboard pattern over the entire 8x8 matrix
matrix = np.tile(checkerboard, (4, 4))

print(matrix)

"""#### 22. Normalize a 5x5 random matrix (★☆☆) 
(**hint**: (x - min) / (max - min))
"""

matrix = np.random.random((5, 5)) #This will normalize the matrix so that all the elements are within the range 0 and 1.

# Normalize the matrix using the min-max normalization formula
matrix = (matrix - matrix.min()) / (matrix.max() - matrix.min())

print(matrix)

"""#### 23. Create a custom dtype that describes a color as four unsigned bytes (RGBA) (★☆☆) 
(**hint**: np.dtype)
"""

RGBA = np.dtype([('red',np.uint8),('green',np.uint8),('blue',np.uint8),('alpha',np.uint8)])
color = np.array((1,2,4,3),dtype = RGBA)
print(color['red'])
type(color)

"""#### 24. Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (★☆☆) 
(**hint**: np.dot | @)
"""

matrix_a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]])
matrix_b = np.array([[1, 2], [3, 4], [5, 6]])

result = np.dot(matrix_a, matrix_b)
print(result)

"""#### 25. Given a 1D array, negate all elements which are between 3 and 8, in place. (★☆☆) 
(**hint**: >, <=)
"""

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# negate all elements between 3 and 8 (inclusive)
arr[(arr > 3) & (arr <= 8)] *= -1

print(arr)

"""#### 26. What is the output of the following script? (★☆☆) 
(**hint**: np.sum)

```python
# Author: Jake VanderPlas

print(sum(range(5),-1))
from numpy import *
print(sum(range(5),-1))
```
"""

print(sum(range(5),-1))
from numpy import *
print(sum(range(5),-1))

"""#### 27. Consider an integer vector Z, which of these expressions are legal? (★☆☆)

```python
Z**Z
2 << Z >> 2
Z <- Z
1j*Z
Z/1/1
Z<Z>Z
```
"""

Z=arange(10)
print(Z**Z)
print(2 << Z >> 2)
print(Z <- Z)
print(1j*Z)
print(Z/1/1)
print(Z<Z>Z)

"""#### 28. What are the result of the following expressions?

```python
np.array(0) / np.array(0)
np.array(0) // np.array(0)
np.array([np.nan]).astype(int).astype(float)
```
"""

np.array(0) / np.array(0)
np.array(0) // np.array(0)
np.array([np.nan]).astype(int).astype(float)

"""#### 29. How to round away from zero a float array ? (★☆☆) 
(**hint**: np.uniform, np.copysign, np.ceil, np.abs)
"""

arr = np.random.uniform(-10, 10, size=5)#creates an array with the lower bond upper bond and the size
print(arr)


#signs = np.copysign(arr)
b=np.ceil(arr)#rounds of the nearest element
c=np.abs(arr)#gives absolute value
#result = rounded * signs
print(signs)#changes the sign of the elements
print(b)
print(c)

"""#### 30. How to find common values between two arrays? (★☆☆) 
(**hint**: np.intersect1d)
"""

a = np.array([1, 2, 3, 4])
b = np.array([3, 4, 5, 6])

common_values = np.intersect1d(a, b)
print(common_values)

"""#### 31. How to ignore all numpy warnings (not recommended)? (★☆☆) 
(**hint**: np.seterr, np.errstate)
"""

np.seterr(warn="ignore")
np.errstate(warn="ignore")

"""#### 32. Is the following expressions true? (★☆☆) 
(**hint**: imaginary number)

```python
np.sqrt(-1) == np.emath.sqrt(-1)
```
"""

np.sqrt(-1) == np.emath.sqrt(-1)

"""#### 33. How to get the dates of yesterday, today and tomorrow? (★☆☆) 
(**hint**: np.datetime64, np.timedelta64)
"""

yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')
today     = np.datetime64('today', 'D')
tomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D')
print(yesterday)
print(today)
print(tomorrow)

"""#### 34. How to get all the dates corresponding to the month of July 2016? (★★☆) 
(**hint**: np.arange(dtype=datetime64\['D'\]))
"""

start = '2016-07-01'
end = '2016-07-31'

dates = np.arange(start, end, dtype='datetime64[D]')
print(dates)

"""#### 35. How to compute ((A+B)\*(-A/2)) in place (without copy)? (★★☆) 
(**hint**: np.add(out=), np.negative(out=), np.multiply(out=), np.divide(out=))
"""

A = np.ones(3)*1
B = np.ones(3)*2
C = np.ones(3)*3
np.add(A,B,out=B)
np.divide(A,2,out=A)
np.negative(A,out=A)
np.dot(A,B)

"""#### 36. Extract the integer part of a random array using 5 different methods (★★☆) 
(**hint**: %, np.floor, np.ceil, astype, np.trunc)
"""

Z =np.array([2.53,-9.57,8.0,7.25,2.45,3.89,-0.45])
print (Z - Z%1)
print (np.floor(Z))
print (np.ceil(Z)-1)
print (Z.astype(int))
print(np.trunc(Z))

"""#### 37. Create a 5x5 matrix with row values ranging from 0 to 4 (★★☆) 
(**hint**: np.arange)
"""

Z = np.zeros((5,5))
Z += np.arange(5)
print(Z)

"""#### 38. Consider a generator function that generates 10 integers and use it to build an array (★☆☆) 
(**hint**: np.fromiter)
"""

import numpy as np

def int_generator():
    for i in range(10):
        yield i

arr = np.fromiter(int_generator(), dtype=int)
print(arr)

"""#### 39. Create a vector of size 10 with values ranging from 0 to 1, both excluded (★★☆) 
(**hint**: np.linspace)
"""

Z = np.linspace(0,1,11,endpoint=False)[1:]
print(Z)

"""#### 40. Create a random vector of size 10 and sort it (★★☆) 
(**hint**: sort)
"""

Z = np.random.uniform(0,10,10)
Z.sort()
print(Z)

"""#### 41. How to sum a small array faster than np.sum? (★★☆) 
(**hint**: np.add.reduce)
"""

arr = np.array([1, 2, 3, 4])
result = np.add.reduce(arr)
print(result)

"""#### 42. Consider two random array A and B, check if they are equal (★★☆) 
(**hint**: np.allclose, np.array\_equal)
"""

A = np.random.randint(0,3,5)
B = np.random.randint(0,3,5)
print(A)

print(B)

# Assuming identical shape of the arrays and a tolerance for the comparison of values
equal = np.allclose(A,B)
print(equal)

# Checking both the shape and the element values, no tolerance (values have to be exactly equal)
equal = np.array_equal(A,B)
print(equal)

"""#### 43. Make an array immutable (read-only) (★★☆) 
(**hint**: flags.writeable)
"""

arr = np.array([1, 2, 3, 4])
arr.flags.writeable = False

try:
    arr[0] = 5
except ValueError as e:
    print(e)

"""#### 44. Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates (★★☆) 
(**hint**: np.sqrt, np.arctan2)
"""

# Generate a random 10x2 matrix of Cartesian coordinates
x = np.random.rand(10, 2)
print(x)

# Convert to polar coordinates
r = np.sqrt(x[:, 0]**2 + x[:, 1]**2)
theta = np.arctan2(x[:, 1], x[:, 0])

# Result is a 10x2 matrix with the polar coordinates
polar_coords = np.column_stack((r, theta))
print(polar_coords)

"""#### 45. Create random vector of size 10 and replace the maximum value by 0 (★★☆) 
(**hint**: argmax)
"""

arr = np.random.random(10)
print(arr)
arr[arr.argmax()] = 0
print(arr)

"""#### 46. Create a structured array with `x` and `y` coordinates covering the \[0,1\]x\[0,1\] area (★★☆) 
(**hint**: np.meshgrid)
"""

x, y = np.meshgrid(np.linspace(0, 1, 10), np.linspace(0, 1, 10))

# Define the structure of the array
dtype = [('x', float), ('y', float)]

# Create the structured array
s = np.array(list(zip(x.flatten(), y.flatten())), dtype=dtype)
s

"""####  47. Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj)) 
(**hint**: np.subtract.outer)
"""

X = np.array([1, 2, 3])
Y = np.array([4, 5, 6])

# Compute the differences between all pairs of elements in X and Y
differences = np.subtract.outer(X, Y)

# Compute the Cauchy matrix
C = 1/differences
C

"""#### 48. Print the minimum and maximum representable value for each numpy scalar type (★★☆) 
(**hint**: np.iinfo, np.finfo, eps)
"""

for dtype in [np.int8, np.int16, np.int32, np.int64]:
    info = np.iinfo(dtype)
    print(f"{dtype}: min = {info.min}, max = {info.max}")

# Print the minimum and maximum representable values for each floating-point type
for dtype in [np.float16, np.float32, np.float64]:
    info = np.finfo(dtype)
    print(f"{dtype}: min = {info.min}, max = {info.max}, eps = {info.eps}")

"""#### 49. How to print all the values of an array? (★★☆) 
(**hint**: np.set\_printoptions)
"""

x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Print all the values of the array
np.set_printoptions(threshold=np.inf)
print(x)

"""#### 50. How to find the closest value (to a given scalar) in a vector? (★★☆) 
(**hint**: argmin)
"""

x = np.array([1, 2, 3, 4, 5])
value = 4.5

# Find the index of the element with the minimum absolute difference
idx = np.abs(x - value).argmin()

# The closest value is the element at the index we just found
closest_value = x[idx]

print(f"The closest value to {value} is {closest_value}")

"""#### 51. Create a structured array representing a position (x,y) and a color (r,g,b) (★★☆) 
(**hint**: dtype)
"""

dtype = np.dtype([('position', np.float32, (2,)), ('color', np.uint8, (3,))])
array[0]['position'] = [1.0, 2.0]
array[0]['color'] = [255, 0, 0]
# Create an empty structured array with the defined data type
array = np.empty(5, dtype=dtype)


print(array)

"""#### 52. Consider a random vector with shape (100,2) representing coordinates, find point by point distances (★★☆) 
(**hint**: np.atleast\_2d, T, np.sqrt)
"""

arr = np.random.random((100,2))
X,Y = np.atleast_2d(arr[:,0],arr[:,1])
D = np.sqrt( (X-X.T)**2 + (Y-Y.T)**2)

# Much faster with scipy
import scipy
# Thanks Gavin Heverly-Coulson (#issue 1)
import scipy.spatial

Z = np.random.random((10,2))
D = scipy.spatial.distance.cdist(Z,Z)
print(D)

"""#### 53. How to convert a float (32 bits) array into an integer (32 bits) in place? 
(**hint**: astype(copy=False))
"""

Z = np.arange(10, dtype=np.float32)
Z_1 = Z.astype(np.float32, copy=False)
Z_1[0] = 2
print(Z)

"""#### 54. How to read the following file? (★★☆) 
(**hint**: np.genfromtxt)

```
1, 2, 3, 4, 5
6,  ,  , 7, 8
 ,  , 9,10,11
```
"""

from io import StringIO

# Fake file 
s = StringIO("""1, 2, 3, 4, 5\n
                6,  ,  , 7, 8\n
                 ,  , 9,10,11\n""")
Z = np.genfromtxt(s, delimiter=",", dtype=np.int)
print(Z)

"""#### 55. What is the equivalent of enumerate for numpy arrays? (★★☆) 
(**hint**: np.ndenumerate, np.ndindex)
"""

Z = np.arange(9).reshape(3,3)
for index, value in np.ndenumerate(Z):
    print(index, value)
for index in np.ndindex(Z.shape):
    print(index, Z[index])

"""#### 56. Generate a generic 2D Gaussian-like array (★★☆) 
(**hint**: np.meshgrid, np.exp)
"""

sigma,myu = 1.0,0.0

X,Y  = np.meshgrid(np.linspace(-1,1,10),np.linspace(-1,1,10))
D = np.sqrt(X**2+Y**2)
G = np.exp(-(D-myu)**2/(2*sigma**2))
print(G)

"""#### 57. How to randomly place p elements in a 2D array? (★★☆) 
(**hint**: np.put, np.random.choice)
"""

# Set the size of the array
n, m = 5, 5

# Create an array of zeros with shape (n, m)
array = np.zeros((n, m))

# Set the number of elements to place in the array
p = 5

# Choose p random indices
indices = np.random.choice(n*m, p, replace=False)

# Place the elements at the chosen indices
np.put(array, indices, 1)

print(array)

"""#### 58. Subtract the mean of each row of a matrix (★★☆) 
(**hint**: mean(axis=,keepdims=))
"""

X = np.random.rand(5, 10)
Y = X - X.mean(axis = 1,keepdims = True)
print(Y)
X.mean(axis = 1).reshape(-1,1) == X.mean(axis = 1,keepdims =True)

"""#### 59. How to sort an array by the nth column? (★★☆) 
(**hint**: argsort)
"""

import numpy as np

# Create a random array with shape (3, 3)
array = np.random.rand(3, 3)

# Get the indices that would sort the array by the second column
indices = array[:, 1].argsort()

# Use the indices to index into the array and sort the array by the second column
array = array[indices]
array

"""#### 60. How to tell if a given 2D array has null columns? (★★☆) 
(**hint**: any, ~)
"""

Z = np.random.randint(0,3,(3,10))
Z[:,1] = 0
Z = Z.astype(bool)
print(Z)
print(~Z)
(Z).any(axis = 0)

"""#### 61. Find the nearest value from a given value in an array (★★☆) 
(**hint**: np.abs, argmin, flat)
"""

import numpy as np

# Create a random array with shape (3, 3)
array = np.random.rand(3, 3)

# Set the value to find the nearest to
value = 1

# Calculate the absolute distance between the value and each element in the array
distance = np.abs(array - value)

# Find the index of the element with the minimum distance
index = np.argmin(distance)

# Flatten the array to 1D
array_1d = array.flat

# Get the nearest value using the index
nearest_value = array_1d[index]

# Print the result
print(nearest_value)

"""#### 62. Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★☆) 
(**hint**: np.nditer)
"""

import numpy as np

# Set the size of the arrays
n, m = 1, 3

# Create the first array with shape (1, 3)
array1 = np.random.rand(n, m)

# Create the second array with shape (3, 1)
array2 = np.random.rand(m, n)

# Create an iterator that iterates over the arrays in parallel
iterator = np.nditer([array1, array2])

# Initialize a variable to store the sum
sum = 0

# Iterate over the arrays and compute the sum
for a1, a2 in iterator:
    sum += a1 + a2

# Print the result
print(array1)
print(array2)
print(sum)

"""#### 63. Create an array class that has a name attribute (★★☆) 
(**hint**: class method)
"""

import numpy as np

class Array:
    def __init__(self, data, name):
        # Set the name attribute
        self.name = name
        # Set the data attribute
        self.data = np.array(data)

# Create an instance of the Array class with shape (3, 3) and name "My Array"
array = Array(np.ones((3, 3)), "My Array")

# Print the name and data attributes
print(array.name)
print(array.data)

"""#### 64. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★) 
(**hint**: np.bincount | np.add.at)
"""

import numpy as np

# Create the first vector
vector1 = np.array([1, 2, 3, 4, 5])

# Create the second vector with indices
vector2 = np.array([0, 2, 4, 0, 0])

# Use np.add.at to add 1 to each element of vector1 indexed by vector2
np.add.at(vector1, vector2, 1)

# Print the result
print(vector1)

"""#### 65. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★) 
(**hint**: np.bincount)
"""

import numpy as np

X = [1, 2, 3, 4]
I = [0, 0, 1, 1]

F = np.bincount(I, X)

print(F)

"""#### 66. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★) 
(**hint**: np.unique)
"""

w, h = 256, 256
I = np.random.randint(0, 4, (h, w, 3)).astype(np.ubyte)
colors = np.unique(I.reshape(-1, 3), axis=0)
n = len(colors)
print(n)


w, h = 256, 256
I = np.random.randint(0,4,(h,w,3), dtype=np.uint8)

# View each pixel as a single 24-bit integer, rather than three 8-bit bytes
I24 = np.dot(I.astype(np.uint32),[1,256,65536])

# Count unique colours
n = len(np.unique(I24))
print(n)

"""#### 67. Considering a four dimensions array, how to get sum over the last two axis at once? (★★★) 
(**hint**: sum(axis=(-2,-1)))
"""

A = np.random.randint(0,10,(3,4,3,4))
# solution by passing a tuple of axes (introduced in numpy 1.7.0)
sum = A.sum(axis=(-2,-1))
print(sum)
# solution by flattening the last two dimensions into one
# (useful for functions that don't accept tuples for axis argument)
sum = A.reshape(A.shape[:-2] + (-1,)).sum(axis=-1)
print(sum)

"""#### 68. Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset  indices? (★★★) 
(**hint**: np.bincount)
"""

import numpy as np

# D is the vector of values
D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# S is the vector of subset indices
S = [1, 1, 2, 2, 2, 3, 3, 3, 3, 3]

# Use bincount to count the number of occurrences of each index in S
counts = np.bincount(S)

# Use bincount to sum the values in D for each index in S
sums = np.bincount(S, weights=D)

# Divide the sums by the counts to compute the means
means = sums / counts

print(means)

"""#### 69. How to get the diagonal of a dot product? (★★★) 
(**hint**: np.diag)
"""

# Define the matrices A and B
A = [[1, 2], [3, 4]]
B = [[5, 6], [7, 8]]

# Compute the dot product C = A.B
C = np.dot(A, B)

# Extract the diagonal of C
diagonal = np.diag(C)
print(C)

print(diagonal)

"""#### 70. Consider the vector \[1, 2, 3, 4, 5\], how to build a new vector with 3 consecutive zeros interleaved between each value? (★★★) 
(**hint**: array\[::4\])
"""

Z = np.array([1,2,3,4,5])
nz = 3
Z0 = np.zeros(len(Z) + (len(Z)-1)*(nz))
Z0[::nz+1] = Z
print(Z0)

"""#### 71. Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (★★★) 
(**hint**: array\[:, :, None\])
"""

A = np.ones((5,5,3))
B = 2*np.ones((5,5))
print(A * B[:,:,None])

"""#### 72. How to swap two rows of an array? (★★★) 
(**hint**: array\[\[\]\] = array\[\[\]\])
"""

A = np.arange(25).reshape(5,5)
A[[0,1]] = A[[1,0]]
print(A)

"""#### 73. Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the  triangles (★★★) 
(**hint**: repeat, np.roll, np.sort, view, np.unique)
"""

faces = np.random.randint(0,100,(10,3))
F = np.roll(faces.repeat(2,axis=1),-1,axis=1)
F = F.reshape(len(F)*3,2)
F = np.sort(F,axis=1)
G = F.view( dtype=[('p0',F.dtype),('p1',F.dtype)] )
G = np.unique(G)
print(G)

"""#### 74. Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C? (★★★) 
(**hint**: np.repeat)
"""

C = np.bincount([1,1,2,3,4,4,6])
A = np.repeat(np.arange(len(C)), C)
print(A)

"""#### 75. How to compute averages using a sliding window over an array? (★★★) 
(**hint**: np.cumsum)
"""

import numpy as np

def moving_average(a, n=3) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n
Z = np.arange(20)
print(moving_average(Z, n=3))

"""#### 76. Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z\[0\],Z\[1\],Z\[2\]) and each subsequent row is  shifted by 1 (last row should be (Z\[-3\],Z\[-2\],Z\[-1\]) (★★★) 
(**hint**: from numpy.lib import stride_tricks)
"""

from numpy.lib import stride_tricks

def rolling(a, window):
    shape = (a.size - window + 1, window)
    strides = (a.strides[0], a.strides[0])
    return stride_tricks.as_strided(a, shape=shape, strides=strides)
Z = rolling(np.arange(10), 3)
print(Z)

"""#### 77. How to negate a boolean, or to change the sign of a float inplace? (★★★) 
(**hint**: np.logical_not, np.negative)
"""

Z = np.random.randint(0,2,100)
np.logical_not(Z, out=Z)

Z = np.random.uniform(-1.0,1.0,100)
np.negative(Z, out=Z)

"""#### 78. Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i  (P0\[i\],P1\[i\])? (★★★)"""

def distance(P0, P1, p):
    T = P1 - P0
    L = (T**2).sum(axis=1)
    U = -((P0[:,0]-p[...,0])*T[:,0] + (P0[:,1]-p[...,1])*T[:,1]) / L
    U = U.reshape(len(U),1)
    D = P0 + U*T - p
    return np.sqrt((D**2).sum(axis=1))

P0 = np.random.uniform(-10,10,(10,2))
P1 = np.random.uniform(-10,10,(10,2))
p  = np.random.uniform(-10,10,( 1,2))
print(distance(P0, P1, p))

"""#### 79. Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P\[j\]) to each line i (P0\[i\],P1\[i\])? (★★★)"""

P0 = np.random.uniform(-10, 10, (10,2))
P1 = np.random.uniform(-10,10,(10,2))
p = np.random.uniform(-10, 10, (10,2))
print(np.array([distance(P0,P1,p_i) for p_i in p]))

"""#### 80. Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a `fill` value when necessary) (★★★) 
(**hint**: minimum, maximum)
"""

Z = np.random.randint(0,10,(10,10))
shape = (5,5)
fill  = 0
position = (1,1)

R = np.ones(shape, dtype=Z.dtype)*fill
P  = np.array(list(position)).astype(int)
Rs = np.array(list(R.shape)).astype(int)
Zs = np.array(list(Z.shape)).astype(int)

R_start = np.zeros((len(shape),)).astype(int)
R_stop  = np.array(list(shape)).astype(int)
Z_start = (P-Rs//2)
Z_stop  = (P+Rs//2)+Rs%2

R_start = (R_start - np.minimum(Z_start,0)).tolist()
Z_start = (np.maximum(Z_start,0)).tolist()
R_stop = np.maximum(R_start, (R_stop - np.maximum(Z_stop-Zs,0))).tolist()
Z_stop = (np.minimum(Z_stop,Zs)).tolist()

r = [slice(start,stop) for start,stop in zip(R_start,R_stop)]
z = [slice(start,stop) for start,stop in zip(Z_start,Z_stop)]
R[r] = Z[z]
print(Z)
print(R)

"""#### 81. Consider an array Z = \[1,2,3,4,5,6,7,8,9,10,11,12,13,14\], how to generate an array R = \[\[1,2,3,4\], \[2,3,4,5\], \[3,4,5,6\], ..., \[11,12,13,14\]\]? (★★★) 
(**hint**: stride\_tricks.as\_strided)
"""

Z = np.arange(1,15,dtype=np.uint32)
R = stride_tricks.as_strided(Z,(11,4),(4,4))
print(R)

"""#### 82. Compute a matrix rank (★★★) 
(**hint**: np.linalg.svd) (suggestion: np.linalg.svd)
"""

Z = np.random.uniform(0,1,(10,10))
U, S, V = np.linalg.svd(Z) # Singular Value Decomposition
rank = np.sum(S > 1e-10)
print(rank)

"""#### 83. How to find the most frequent value in an array? 
(**hint**: np.bincount, argmax)
"""

Z = np.random.randint(0,10,50)
print(np.bincount(Z).argmax())

"""#### 84. Extract all the contiguous 3x3 blocks from a random 10x10 matrix (★★★) 
(**hint**: stride\_tricks.as\_strided)
"""

Z = np.random.randint(0,5,(10,10))
n = 3
i = 1 + (Z.shape[0]-3)
j = 1 + (Z.shape[1]-3)
C = stride_tricks.as_strided(Z, shape=(i, j, n, n), strides=Z.strides + Z.strides)
print(C)

"""#### 85. Create a 2D array subclass such that Z\[i,j\] == Z\[j,i\] (★★★) 
(**hint**: class method)
"""

class Symetric(np.ndarray):
    def __setitem__(self, index, value):
        i,j = index
        super(Symetric, self).__setitem__((i,j), value)
        super(Symetric, self).__setitem__((j,i), value)

def symetric(Z):
    return np.asarray(Z + Z.T - np.diag(Z.diagonal())).view(Symetric)

S = symetric(np.random.randint(0,10,(5,5)))
S[2,3] = 42
print(S)

"""#### 86. Consider a set of p matrices wich shape (n,n) and a set of p vectors 

1.   List item
2.   List item

with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (★★★) 
(**hint**: np.tensordot)
"""

p, n = 10, 20
M = np.ones((p,n,n))
V = np.ones((p,n,1))
S = np.tensordot(M, V, axes=[[0, 2], [0, 1]])
print(S)

"""#### 87. Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (★★★) 
(**hint**: np.add.reduceat)
"""

Z = np.ones((16,16))
k = 4
S = np.add.reduceat(np.add.reduceat(Z, np.arange(0, Z.shape[0], k), axis=0),
                                       np.arange(0, Z.shape[1], k), axis=1)
print(S)

"""#### 88. How to implement the Game of Life using numpy arrays? (★★★)"""

import numpy as np

# Initialize the grid
grid = np.zeros((50, 50))

# Set some cells to be alive
grid[10:15, 10:15] = 1
grid[35:40, 35:40] = 1

def update_grid(grid):
  # Determine the number of live neighbors for each cell
  live_neighbors = (grid[:-2, :-2] + grid[:-2, 1:-1] + grid[:-2, 2:] +
                    grid[1:-1, :-2] + grid[1:-1, 2:] +
                    grid[2:, :-2] + grid[2:, 1:-1] + grid[2:, 2:])

  # Apply the rules of the Game of Life
  birth = (live_neighbors == 3) & (grid[1:-1, 1:-1] == 0)
  survive = ((live_neighbors == 2) | (live_neighbors == 3)) & (grid[1:-1, 1:-1] == 1)
  grid[...] = 0
  grid[1:-1, 1:-1][birth | survive] = 1
  return grid

# Run the simulation for 10 steps
for i in range(10):
  grid = update_grid(grid)
  print(grid)

"""#### 89. How to get the n largest values of an array (★★★) 
(**hint**: np.argsort | np.argpartition)
"""

Z = np.arange(1000)
np.random.shuffle(Z)
n = 9

# Slow
print (Z[np.argsort(Z)[-n:]])

# Fast
print (Z[np.argpartition(-Z,n)[:n]])

"""#### 90. Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (★★★) 
(**hint**: np.indices)
"""

def cartesian(arrays):
    arrays = [np.asarray(a) for a in arrays]
    shape = (len(x) for x in arrays)

    ix = np.indices(shape, dtype=int)
    ix = ix.reshape(len(arrays), -1).T

    for n, arr in enumerate(arrays):
        ix[:, n] = arrays[n][ix[:, n]]

    return ix

print (cartesian(([1, 2, 3], [4, 5], [6, 7])))

"""#### 91. How to create a record array from a regular array? (★★★) 
(**hint**: np.core.records.fromarrays)
"""

Z = np.array([("Hello", 2.5, 3),
              ("World", 3.6, 2)])
R = np.core.records.fromarrays(Z.T,
                               names='col1, col2, col3',
                               formats = 'S8, f8, i8')
print(R)

"""#### 92. Consider a large vector Z, compute Z to the power of 3 using 3 different methods (★★★) 
(**hint**: np.power, \*, np.einsum)
"""

# Commented out IPython magic to ensure Python compatibility.

x = np.random.rand(int(5e7))

# %timeit np.power(x,3)
# %timeit x*x*x
# %timeit np.einsum('i,i,i->i',x,x,x)

"""#### 93. Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (★★★) 
(**hint**: np.where)
"""

A = np.random.randint(0,5,(8,3))
B = np.random.randint(0,5,(2,2))

C = (A[..., np.newaxis, np.newaxis] == B)
rows = np.where(C.any((3,1)).all(1))[0]
print(rows)

"""#### 94. Considering a 10x3 matrix, extract rows with unequal values (e.g. \[2,2,3\]) (★★★)"""

Z = np.random.randint(0,5,(10,3))
print(Z)
# solution for arrays of all dtypes (including string arrays and record arrays)
E = np.all(Z[:,1:] == Z[:,:-1], axis=1)
U = Z[~E]
print(U)
# soluiton for numerical arrays only, will work for any number of columns in Z
U = Z[Z.max(axis=1) != Z.min(axis=1),:]
print(U)

"""#### 95. Convert a vector of ints into a matrix binary representation (★★★) 
(**hint**: np.unpackbits)
"""

I = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128], dtype=np.uint8)
print(np.unpackbits(I[:, np.newaxis], axis=1))

"""#### 96. Given a two dimensional array, how to extract unique rows? (★★★) 
(**hint**: np.ascontiguousarray)
"""

Z = np.random.randint(0,2,(6,3))
T = np.ascontiguousarray(Z).view(np.dtype((np.void, Z.dtype.itemsize * Z.shape[1])))
_, idx = np.unique(T, return_index=True)
uZ = Z[idx]
print(uZ)

"""#### 97. Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function (★★★) 
(**hint**: np.einsum)
"""

A = np.random.uniform(0,1,10)
B = np.random.uniform(0,1,10)

np.einsum('i->', A)       # np.sum(A)
np.einsum('i,i->i', A, B) # A * B
np.einsum('i,i', A, B)    # np.inner(A, B)
np.einsum('i,j->ij', A, B)    # np.outer(A, B)

"""#### 98. Considering a path described by two vectors (X,Y), how to sample it using equidistant samples (★★★)? 
(**hint**: np.cumsum, np.interp)
"""

phi = np.arange(0, 10*np.pi, 0.1)
a = 1
x = a*phi*np.cos(phi)
y = a*phi*np.sin(phi)

dr = (np.diff(x)**2 + np.diff(y)**2)**.5 # segment lengths
r = np.zeros_like(x)
r[1:] = np.cumsum(dr)                # integrate path
r_int = np.linspace(0, r.max(), 200) # regular spaced path
x_int = np.interp(r_int, r, x)       # integrate path
y_int = np.interp(r_int, r, y)

"""#### 99. Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (★★★) 
(**hint**: np.logical\_and.reduce, np.mod)
"""

X = np.asarray([[1.0, 0.0, 3.0, 8.0],
                [2.0, 0.0, 1.0, 1.0],
                [1.5, 2.5, 1.0, 0.0]])
n = 4
M = np.logical_and.reduce(np.mod(X, 1) == 0, axis=-1)
M &= (X.sum(axis=-1) == n)
print(X[M])

"""#### 100. Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (★★★) 
(**hint**: np.percentile)
"""

X = np.random.randn(100) # random 1D array
N = 1000 # number of bootstrap samples
idx = np.random.randint(0, X.size, (N, X.size))
means = X[idx].mean(axis=1)
confint = np.percentile(means, [2.5, 97.5])
print(confint)